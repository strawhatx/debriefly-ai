name: Deploy Worker Service

on:
  push:
    branches: [ main ]
    paths:
      - 'worker-service/**'
      - '.github/workflows/deploy-worker.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./worker-service
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/debriefly-worker:latest
          build-args: |
            NODE_ENV=production

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Deploy to VPS
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          # Create docker-compose.yml on the VPS
          ssh $SSH_USER@$SSH_HOST "cat > ~/docker-compose.yml << 'EOL'
          version: '3.8'

          services:
            worker:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/debriefly-worker:latest
              environment:
                - NODE_ENV=production
                - SUPABASE_URL=${SUPABASE_URL}
                - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
                - DATABASE_URL=${DATABASE_URL}
                - GOOGLE_GEMINI_API_KEY=${GOOGLE_GEMINI_API_KEY}
              restart: unless-stopped
              deploy:
                resources:
                  limits:
                    memory: 2G
                  reservations:
                    memory: 1G
          EOL"

          # Pull latest image and restart the service
          ssh $SSH_USER@$SSH_HOST "cd ~ && \
            docker-compose pull && \
            docker-compose up -d --force-recreate" 